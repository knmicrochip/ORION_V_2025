package pl.orion.rover_controller_service.chassis.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import pl.orion.rover_controller_service.chassis.model.ChassisInboundPayload;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class DriveModeManager {
    private static final Logger logger = LoggerFactory.getLogger(DriveModeManager.class);
    
    private final Map<String, DriveModeStrategy> strategies;
    private volatile DriveModeStrategy currentStrategy;
    
    @Autowired
    public DriveModeManager(List<DriveModeStrategy> strategies) {
        this.strategies = new ConcurrentHashMap<>();
        
        // Register all available strategies
        for (DriveModeStrategy strategy : strategies) {
            this.strategies.put(strategy.getModeName(), strategy);
            logger.info("Registered drive mode strategy: {}", strategy.getModeName());
        }
        
        // Set default strategy to PWM
        this.currentStrategy = this.strategies.get("pwm");
        if (this.currentStrategy == null && !this.strategies.isEmpty()) {
            // If PWM is not available, use the first available strategy
            this.currentStrategy = this.strategies.values().iterator().next();
        }
        
        logger.info("Current drive mode set to: {}", 
            this.currentStrategy != null ? this.currentStrategy.getModeName() : "none");
    }
    
    /**
     * Process the inbound payload using the current drive mode strategy.
     *
     * @param payload The inbound payload to process
     * @return The outbound payload generated by the current strategy
     */
    public Object process(ChassisInboundPayload payload) {
        if (currentStrategy == null) {
            throw new IllegalStateException("No drive mode strategy is currently active");
        }
        
        return currentStrategy.process(payload);
    }
    
    /**
     * Switch to a different drive mode.
     *
     * @param modeName The name of the mode to switch to
     * @return true if the switch was successful, false if the mode is not available
     */
    public boolean switchMode(String modeName) {
        DriveModeStrategy strategy = strategies.get(modeName.toLowerCase());
        if (strategy != null) {
            DriveModeStrategy previousStrategy = this.currentStrategy;
            this.currentStrategy = strategy;
            logger.info("Switched drive mode from {} to {}", 
                previousStrategy != null ? previousStrategy.getModeName() : "none", 
                strategy.getModeName());
            return true;
        } else {
            logger.warn("Attempted to switch to unknown drive mode: {}", modeName);
            return false;
        }
    }
    
    /**
     * Get the name of the currently active drive mode.
     *
     * @return The name of the current mode, or null if no mode is active
     */
    public String getCurrentModeName() {
        return currentStrategy != null ? currentStrategy.getModeName() : null;
    }
    
    /**
     * Get a list of all available drive mode names.
     *
     * @return An array of available mode names
     */
    public String[] getAvailableModes() {
        return strategies.keySet().toArray(new String[0]);
    }
}
